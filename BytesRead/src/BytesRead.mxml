<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					  creationComplete="init(event)"
					   >
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.YFFramework.air.FileUtil;
			import com.YFFramework.core.net.loader.file.FileLoader;
			import com.YFFramework.core.net.loader.image_swf.BytesLoader;
			import com.YFFramework.core.net.loader.image_swf.UILoader;
			import com.YFFramework.core.utils.UtilString;
			import com.YFFramework.core.utils.image.Cast;
			import com.YFFramework.core.utils.image.advanced.encoder.PNGEncoder;
			
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			
			import tianjie.EncryptUtil;
			private var _storeFile:File=File.desktopDirectory;
			
			private var _fileName:String;
			
			protected function init(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
				addEventListener(NativeDragEvent.NATIVE_DRAG_DROP,onDragDrop);
				addEventListener(NativeDragEvent.NATIVE_DRAG_ENTER,onDragDrop);
			}
			private function onDragDrop(e:NativeDragEvent):void
			{
				//将拖入的文件以数组形式获得，指定拖入的数据是文件数组形式
				var files:Array = e.clipboard.getData(ClipboardFormats.FILE_LIST_FORMAT) as Array;
				//获得拖入的第一个文件
				var file:File = File(files[0]);
				switch(e.type)
				{				
					case NativeDragEvent.NATIVE_DRAG_ENTER:  
						if(file.type==".swf"||file.type==".act")
							NativeDragManager.acceptDragDrop(this);
						break;
					case NativeDragEvent.NATIVE_DRAG_DROP:
						_storeFile=file.parent;
						_fileName=UtilString.getExactName(file.url);
						openFile(file.url);
						break;
				}
			}  
			private function openFile(url:String):void
			{
				var loader:FileLoader=new FileLoader(URLLoaderDataFormat.BINARY);
				loader.loadCompleteCallBack=callBack;
				var domain:ApplicationDomain=new ApplicationDomain();
				loader.load(url);
			}
			
			private function callBack(loader:FileLoader):void
			{
				var data:ByteArray=ByteArray(loader.data);
			
				decodeZhanShenLu(data);
			}
			
			/**解析战神录
			 */ 
			private function decodeZhanShenLu(data:ByteArray):void
			{
				data.uncompress();
				var first:int = data.readUnsignedInt();
				var title:String = data.readUTF();
				var cate:String = data.readUTF();
				var model:String = data.readUTF();
				var action:String = data.readUTF();
				var len:int = data.readUnsignedInt();
				
				var imageBytes:ByteArray=new ByteArray();
				data.readBytes(imageBytes,0,len);
				var config:Object=data.readObject();
				
				FileUtil.createFileByByteArray(_storeFile,_fileName+".swf",imageBytes);
				var byteLoader:BytesLoader=new BytesLoader();
				byteLoader.loadCompleteCalback=zhanshenComplete;
				byteLoader.load(imageBytes,new ApplicationDomain());
			}
			
			private function zhanshenComplete(byteLoader:BytesLoader,domain:ApplicationDomain):void
			{
				var effectClass:Class=domain.getDefinition("effect") as Class;
				var effect:MovieClip=new effectClass() as MovieClip;
				var code:PNGEncoder=new PNGEncoder();
				var bitmapData:BitmapData;
				var mcMat:Matrix=new Matrix();
				mcMat.tx=800;
				mcMat.ty=800;
				var pngName:String=_fileName+"/"+"1-1-";
				var imageName:String;
				for(var i:int=1;i<=effect.totalFrames;++i)
				{
					if(bitmapData)bitmapData.dispose();
					effect.gotoAndStop(i);
					bitmapData=new BitmapData(1600,1600,true,0xFFFFFF);
					bitmapData.draw(effect,mcMat);
					var bytes:ByteArray=code.encode(bitmapData);
					imageName=pngName+i;
					FileUtil.createFileByByteArray(_storeFile,imageName+".png",bytes);
				}
				Alert.show("图片生存完成");

			}
			
			
			
			/**天界
			 */ 
			private function saveTianJie(data:ByteArray):void
			{
				///天界主文件 
				var tianjie:ByteArray=EncryptUtil.unencrypt(data);
				///保存为swf 
				FileUtil.createFileByByteArray(_storeFile,_fileName+".swf",tianjie);

			}
			
			
			
		]]>
	</fx:Script>
</s:WindowedApplication>
